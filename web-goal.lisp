;;;; Stephan Luther
;;;; The web portion of the goal-site
;;;; 2011/08/30

(load "goal.lisp")
(load "webserver.lisp")

(defparameter *show-all* nil)

(defun goal-request-handler (path header params)
	(progn
		(html5-doctype)
		(tag html ()
				 (tag head ()
							(tag title ()
									 (princ "Goal Site"))
							(embed-css3))
				 (tag body ()
							(print-top-navigation-menu)
							(hide-show-completed)
							;(princ path)
							(load-information-from-file "information.goals")
							(if (equal path "GOALS")
									(http-path-goals params))
							(if (equal path "TODOLIST")
									(http-path-todolist params))
							(if (equal path "goal")
									(http-path-goal params))
							(if (equal path "achievegoal")
									(http-path-achievegoal params))
							(if (equal path "deletegoal")
									(http-path-deletegoal params))
							(if (equal path "deletenote")
									(http-path-deletegoalnote params))
							(if (equal path "deletetodoitem")
									(http-path-deletetodoitem params))
							(if (equal path "achievetodoitem")
									(http-path-achievetodoitem params))
							(save-information-to-file "information.goals" *information*)))))

(defun http-path-achievetodoitem (parameters)
	(let ((itemid (parse-integer (cdr (assoc 'itemid parameters)))))
		(set-complete itemid (getf *information* :todo-list))))

(defun http-path-deletetodoitem (parameters)
	(let ((itemid (parse-integer (cdr (assoc 'itemid parameters)))))
		(delete-todo-item itemid *information*)))

(defun http-path-todolist (parameters)
	(progn
		(create-todo-item-form)
		(process-parameters parameters)
		(tag h2 ()
				 (princ "Todo List<br>"))
		(list-todo-list (get-pruned-list-from *show-all* (getf *information* :todo-list)))))

(defun http-path-deletegoalnote (parameters)
	(let ((goalid (parse-integer (cdr (assoc 'goalid parameters))))
				(noteid (parse-integer (cdr (assoc 'noteid parameters)))))
		(delete-goal-note noteid (search-id goalid (getf *information* :goals)))))

;; Can modify this function to receive a location variable perhaps to redirect back to the calling paget
(defun http-path-achievegoal (parameters)
	(let ((goalid (parse-integer (cdr (assoc 'goalid parameters)))))
		(set-complete goalid (getf *information* :goals))))

(defun http-path-deletegoal (parameters)
	(let ((goalid (parse-integer (cdr (assoc 'goalid parameters)))))
		(delete-goal goalid *information*)))

(defun http-path-goal (parameters)
	(let ((goalid (parse-integer (cdr (assoc 'goalid parameters)))))
		(progn
			(process-goal-note-parameters parameters)
			(html-show-goal (search-id goalid (getf *information* :goals))))))

(defun http-path-goals (parameters)
	(progn
		(tag h2 ()
				 (princ "Goal section!<br>"))
		(process-parameters parameters)
		(create-goal-form)
		(tag h3 ()
				 (princ "All Goals<br>"))
		(list-all-goals-summary (get-pruned-list-from *show-all* (getf *information* :goals)))))

(defun save-show-all-to-file (filename show)
	(with-open-file (out filename
											 :direction :output
											 :if-exists :supersede)
		(with-standard-io-syntax
			(print show out))))

(defun load-show-all-from-file (filename)
	(with-open-file (in filename
											:direction :input)
		(with-standard-io-syntax
			(setf *show-all* (read in)))))

(defun print-top-navigation-menu ()
	(tag section (id 'mainnavigation)
			 (tag nav ()
						(tag ul ()
								 (tag li ()
											(tag a (href 'goals)
													 (princ "Goals")))
								 (tag li ()
											(tag a (href 'todolist)
													 (princ "Todo List")))))))

(defun hide-show-completed ()
	(tag p ()
			 (tag form (method 'post)
						(tag input (type 'submit name 'showall value 'showall))
						(tag input (type 'submit name 'hidecomplete value 'hidecomplete)))))

(defun get-pruned-list-from (show data)
	(if (eq show nil)
			(labels ((cmpl-rem (data)
								 (eq (car (cdr (cdr (car data)))) t)))
				(remove-if #'cmpl-rem data))
			data))

(defun html5-doctype ()
	(princ "<!DOCTYPE HTML>"))

(defun process-parameters (params)
	(if params
			(progn
				(load-show-all-from-file "showall.conf")
				(if (equal (car (assoc 'createGoalTitle params)) 'createGoalTitle)
						(process-create-goal-parameters params))
				(if (equal (car (assoc 'delete params)) 'delete)
						(let ((id (parse-integer (cdr (assoc 'goalid params)))))
							(delete-goal id)))
				(if (equal (car (assoc 'accomplished params)) 'accomplished)
						(let ((id (parse-integer (cdr (assoc 'goalid params)))))
							(set-complete id *goals*)))
				(if (equal (car (assoc 'createtodoitem params)) 'createtodoitem)
						(process-create-todo-item-parameters params))
				(if (equal (car (assoc 'todoitemdone params)) 'todoitemdone)
						(let ((id (parse-integer (cdr (assoc 'todoitemid params)))))
							(set-todo-item-complete id *todo-list*)))
				(if (equal (car (assoc 'todoitemdelete params)) 'todoitemdelete)
						(let ((id (parse-integer (cdr (assoc 'todoitemid params)))))
							(delete-todo-item id)))
				(if (equal (car (assoc 'showall params)) 'showall)
						;(error "Showing all"))
						(setf *show-all* t))
				(if (equal (car (assoc 'hidecomplete params)) 'hidecomplete)
						(setf *show-all* nil))
				(save-show-all-to-file "showall.conf" *show-all*)
				;(tag script ()
				;		 (princ "window.setTimeout('window.location=\"goals\"',1000)")); Clear out the address bar of parameters
				)))

(defun process-goal-note-parameters (params)
	(if params
			(progn
				(if (equal (car (assoc 'goalnote params)) 'goalnote)
						(let ((goalid (parse-integer (cdr (assoc 'goalid params))))
									(text (cdr (assoc 'goalnote params))))
							(add-note-to-goal (search-id goalid (getf *information* :goals)) text)))
				(if (equal (car (assoc 'deletenote params)) 'deletenote)
						(let ((goalid (parse-integer (cdr (assoc 'goalid params))))
									(noteid (parse-integer (cdr (assoc 'noteid params)))))
							(delete-goal-note goalid noteid))))))

(defun process-create-goal-parameters (params)
	(let ((title (cdr (assoc 'createGoalTitle params)))
				(desc (cdr (assoc 'createGoalDescription params))))
		(let ((goal (create-goal (get-next-id (getf *information* :goals)) title desc)))
			(add-goal goal *information*))))

(defun process-create-todo-item-parameters (params)
	(let ((text (cdr (assoc 'createtodoitem params))))
		(let ((item (create-todo-item (get-next-id (getf *information* :todo-list)) text)))
			(add-todo-item item *information*))))

(defun create-goal-form ()
	(tag form (method 'post id 'creategoalform)
			 (tag h3 ()
						(princ "Create Goal"))
			 (tag p ()
						(tag label (for 'name)
								 (princ "Title: "))
						(tag input (type 'text name 'createGoalTitle)))
			 (tag textarea (rows '3 cols '50 wrap 'physical name 'createGoalDescription)
						(princ "Goal description goes here"))
			 (princ "<br>")
			 (tag input (type 'submit value "Create Goal"))))

(defun create-todo-item-form ()
	(tag form (method 'post id 'createtodoitem)
			 (tag h3 ()
						(princ "Add todo item"))
			 (tag p ()
						(tag label (for 'item)
								 (princ "Item: "))
						(tag textarea (rows '1 cols '50 wrap 'physical name 'createTodoItem))
						(tag input (type 'submit value "Create Todo Item")))))

(defun embed-css3 ()
	(tag style (type "text/css")
			 (progn
				 (format t "~%")
				 (princ "{")
				 (princ "margin: 0;")
				 (princ "padding: 0;")
				 (princ "}")
				 (format t "~%~%")
				 (princ "header, footer, aside, nav, article {  display: block;}")
				 (format t "~%~%")
				 (princ "#MAINNAVIGATION {")
				 (princ "background-color: lightgreen;")
				 (princ "}")
				 (format t "~%~%")
				 (princ "#CREATEGOALFORM {")
				 (princ "background-color: red;")
				 (princ "border-radius: 22px;")
				 (princ "padding: 25px;")
				 (princ "}")
				 (format t "~%~%")
				 (princ "#GOALINFO {")
				 (princ "background-color: green;")
				 (princ "border-radius: 22px;")
				 (princ "padding: 25px;")
				 (princ "}")
				 (format t "~%~%")
				 (princ "#EXPANDEDGOALINFO {")
				 (princ "background-color: yellow;")
				 (princ "border-radius: 22px;")
				 (princ "padding: 25px;")
				 (princ "}")
				 (format t "~%~%")
				 (princ "#TODOITEM {")
				 (princ "background-color: green;")
				 (princ "border-radius: 5px;")
				 (princ "padding: 0px;")
				 (princ "}")
				 )))

(defun format-timestamp (timestamp)
	(let ((decoded-time (multiple-value-list (decode-universal-time timestamp))))
		(let ((hour (nth 2 decoded-time))
					(minute (nth 1 decoded-time))
					(second (nth 0 decoded-time))
					(day (nth 3 decoded-time))
					(month (nth 4 decoded-time))
					(year (nth 5 decoded-time))
					(timestring (make-string-output-stream)))
			(format timestring "~2,'0d:~2,'0d:~2,'0d - ~2,'0d/~2,'0d/~a" hour minute second day month year)
			(get-output-stream-string timestring))))
	

(defun list-all-goals-summary (goals)
	(mapcar #'html-show-goal-summary goals))

(defun html-show-goal-summary (goal)
	(let ((header goal)      ; This section here needs to be fixed
				(body (cdr goal))) ; I'm having to use too many cars and cdrs to get to the data
		(tag section (id 'goalinfo)
				 (tag p ()
							(princ (format-timestamp (car (cdr (car header))))))
				 (tag h4 ()
							(let ((link (make-string-output-stream)))
								(progn
									(format link "goal?goalid=~a" (car (car header)))
									(tag a (href (get-output-stream-string link))
											 (format t "~a" (car (car body)))))))
				 (tag p ()
							(format t "~a" (car (cdr (car body)))))
				 (tag p ()
							(progn
								(princ "Status: ")
								(if (eq (car (cdr (cdr (car header)))) nil)
										(let ((link (make-string-output-stream)))
											(progn
												(format link "achievegoal?goalid=~a" (car (car header)))
												(tag a (href (get-output-stream-string link))
														 (format t "~a" "Incomplete"))))
										(princ "Achieved"))))
				 (tag p ()
							(let ((link (make-string-output-stream)))
								(progn
									(format link "deletegoal?goalid=~a" (car (car header)))
									(tag a (href (get-output-stream-string link))
											 (format t "~a" "Delete Goal"))))))))

(defun html-show-goal (goal)
	(html-show-goal-summary goal)
	(princ "<br>")
	(tag section (id 'addgoalnote)
			 (tag p ()
						(tag form (method 'post)
								 (tag label (for 'note)
											(princ "New Note: "))
								 (tag textarea (rows '10 cols '100 wrap 'physical name 'goalnote))
								 (tag input (type 'submit name 'submitnote value 'submitnote)))))
	(princ "<br>")
	(tag section (id 'goalnoteinfo)
			 (tag h4
						(princ "All Notes... <br>"))
			 (show-goal-notes goal)))

(defun show-goal-notes (goal)
	(let ((notes (get-all-goal-notes goal))
				(goalid (car (car goal))))
		(labels ((goal-note (note)
							 (let ((header note)
										 (body (cdr note)))
								 (tag section (id 'goalnote)
											(tag p ()
													 (princ (format-timestamp (car (cdr (car header))))))
											(tag p ()
													 (princ (car (car body))))
											(tag p ()
													 (let ((link (make-string-output-stream)))
														 (progn
															 (format link "deletenote?goalid=~a&noteid=~a" goalid (car (car header)))
															 (tag a (href (get-output-stream-string link))
																		(format t "~a" "Delete Note")))))))))
			(mapcar #'goal-note notes))))

(defun list-todo-list (todolist)
	(mapcar #'todo-item-info todolist))

(defun todo-item-info (item)
	(let ((header item)
				(body (cdr item)))
		(tag section (id 'todoitem)
				 (tag p  ()
							(princ (format-timestamp (car (cdr (car header))))))
				 (tag p ()
							(princ (car (car body)))
							(princ " - Status:")
							(if (eq (car (cdr (cdr (car header)))) nil)
									(let ((link (make-string-output-stream)))
										(format link "achievetodoitem?itemid=~a" (car (car header)))
										(tag a (href (get-output-stream-string link))
												 (format t "~a" "Incomplete")))
									(princ "Achieved"))
							(princ "  ")
							(let ((link (make-string-output-stream)))
								(format link "deletetodoitem?itemid=~a" (car (car header)))
								(tag a (href (get-output-stream-string link))
										 (format t "~a" "Delete")))))))
